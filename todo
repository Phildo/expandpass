
- problems:
- - because permutation indexes are pre-cached (for speed+clarity during iteration), permutation groups > 9 become huge memory sinks. > 11 = likely crashes (memory runs out). <- WOULD LOVE HELP!
- - permutations, where an option has potential to be an empty string, should not waste time testing "every possible position of that empty string"

- features:
- - should warn re: high permutation counts
- - enable "realtime permutation" (which eats cost of inline recursion, but allows for iterative permutation w/o eating up-front memory reqs)
- - or at the very least, estimates w/ recursion
- - unicode
- - validate smartly (know to skip whole groups of modifications/etc... if guaranteed to not succeed) [HARD]
- - parallelize (currently not super necessary- ~1M lines/s)
- - pre-defined modification gamuts (alpha, alphanumeric, etc...)
- - user defined modification gamuts (for easy reuse)
- - user-defined smart substitution gamuts
- - current codebase is pretty loose with (SEED-OPTIMIZATION BASED) memory leaks (as in, rather than recursively delete redundant groups/modifications/etc..., it just leaves cleanup for OS). would be nice to formalize. (however- because it really only is in the seed optimization phase, which relies on very limited memory amounts for a non-recurring amount of time, it's actually not a huge problem)
- - current codebase doesn't have ultra-strict error checking (for example- if you have a password > 500 chars, it might crash)
- - "swap adjacent" modification
- - "insert group" modification (at simplest, to allow for insertion of multichar strings; at most complex, to insert arbitrary strings with their own modifications)
- - estimates which take tags into account
- - hashcat integration:
- - - cleanup garbage rather than quitting and letting OS do it
- - - mark features as "unpredictable", and warn that predictions are perfect/off depending on presence in seed
- - - serialize to/from _single integer_ in case of perfect predictability
- - - wrap direct command line use to use API:
- - - sc_expandpass_init: initialize from struct, including from state variable (int) (error in case of seed using unpredictable features)
- - - sc_expandpass_keyspace: return --estimate if predictable, -1 if not
- - - sc_expandpass_seek: deserialize from int (isn't this already done in init?)
- - - sc_expandpass_next: print next
- - - sc_expandpass_shutdown: cleanup

- tests needed:
- - more strange whitespace-y seeds
- - tabs-as-whitespace
- - using strange single-character strings with --unquoted
- - take input via stdin
- - check output via -o
- - all possible seed parsing errors
- - input arg errors
- - very complex seeds with --estimate verified against wc -l
- - very complex seeds whose output is piped through grep searching for specific passwords that should be generated
- - pausing/resuming
- - more complex utags/gtags

- documentation:
- - documentation of seed file in --help or similar
- - documentation of utags and gtags in readme, --help, etc...

