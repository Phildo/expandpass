
- problems:
- - because permutation indexes are pre-cached (for speed+clarity during iteration), permutation groups > 9 become huge memory sinks. > 11 = likely crashes (memory runs out). <- WOULD LOVE HELP!

- features:
- - should warn re: high permutation counts
- - enable "realtime permutation" (which eats cost of recursion, but allows for iterative permutation w/o eating up-front memory reqs)
- - or at the very least, estimates w/ recursion
- - unicode
- - validate smartly (know to skip whole groups of modifications/etc... if guaranteed to not succeed) [HARD]
- - parallelize (currently not super necessary- ~1M lines/s)
- - pre-defined modification gamuts (alpha, alphanumeric, etc...)
- - user defined modification gamuts (for easy reuse)
- - user-defined smart substitution gamuts
- - current codebase is pretty loose with (SEED-OPTIMIZATION BASED) memory leaks (as in, rather than recursively delete redundant groups/modifications/etc..., it just leaves cleanup for OS). would be nice to formalize. (however- because it really only is in the seed optimization phase, which relies on very limited memory amounts for a non-recurring amount of time, it's actually not a huge problem)
- - current codebase doesn't have ultra-strict error checking (for example- if you have a password > 500 chars, it might crash)

- tests needed:
- - more strange whitespace-y seeds
- - tabs-as-whitespace
- - using strange single-character strings with --unquoted
- - take input via stdin
- - check output via -o
- - all possible seed parsing errors
- - input arg errors
- - very complex seeds with --estimate verified against wc -l
- - very complex seeds whose output is piped through grep searching for specific passwords that should be generated
- - pausing/resuming

